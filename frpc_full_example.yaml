# This configuration file is for reference only. Please do not use this configuration directly to run the program as it may have various issues.

# your proxy name will be changed to {user}.{proxy}
user: "your_name"

# A literal address or host name for IPv6 must be enclosed
# in square brackets, as in "[::1]:80", "[ipv6-host]:http" or "[ipv6-host%zone]:80"
# For single serverAddr field, no need square brackets, like serverAddr = "::".
serverAddr: "0.0.0.0"
serverPort: 7000

# STUN server to help penetrate NAT hole.
# natHoleStunServer: "stun.easyvoip.com:3478"

# Decide if exit program when first login failed, otherwise continuous relogin to frps
# default is true
loginFailExit: true

# console or real logFile path like ./frpc.log
log:
  to: "./frpc.log"
  # trace, debug, info, warn, error
  level: "info"
  maxDays: 3
  # disable log colors when log.to is console, default is false
  disablePrintColor: false

auth:
  method: "token"
  # auth.additionalScopes specifies additional scopes to include authentication information.
  # Optional values are HeartBeats, NewWorkConns.
  # additionalScopes: ["HeartBeats", "NewWorkConns"]
  
  # auth token
  token: "12345678"

  # oidc.clientID specifies the client ID to use to get a token in OIDC authentication.
  # oidc.clientID: ""
  # oidc.clientSecret specifies the client secret to use to get a token in OIDC authentication.
  # oidc.clientSecret: ""
  # oidc.audience specifies the audience of the token in OIDC authentication.
  # oidc.audience: ""
  # oidc.scope specifies the permissions of the token in OIDC authentication if AuthenticationMethod == "oidc". By default, this value is "".
  # oidc.scope: ""
  # oidc.tokenEndpointURL specifies the URL which implements OIDC Token Endpoint.
  # It will be used to get an OIDC token.
  # oidc.tokenEndpointURL: ""
  
  # oidc.additionalEndpointParams specifies additional parameters to be sent to the OIDC Token Endpoint.
  # For example, if you want to specify the "audience" parameter, you can set as follow.
  # frp will add "audience=<value>" "var1=<value>" to the additional parameters.
  # oidc.additionalEndpointParams:
  #   audience: "https://dev.auth.com/api/v2/"
  #   var1: "foobar"

# Set admin address for control frpc's action by http api such as reload
webServer:
  addr: "127.0.0.1"
  port: 7400
  user: "admin"
  password: "admin"
  # Admin assets directory. By default, these assets are bundled with frpc.
  # assetsDir: "./static"
  
  # Enable golang pprof handlers in admin listener.
  pprofEnable: false

# The maximum amount of time a dial to server will wait for a connect to complete. Default value is 10 seconds.
# transport.dialServerTimeout: 10

# dialServerKeepalive specifies the interval between keep-alive probes for an active network connection between frpc and frps.
# If negative, keep-alive probes are disabled.
# transport.dialServerKeepalive: 7200

# connections will be established in advance, default value is zero
transport:
  poolCount: 5

  # If tcp stream multiplexing is used, default is true, it must be same with frps
  # tcpMux: true
  
  # Specify keep alive interval for tcp mux.
  # only valid if tcpMux is enabled.
  # tcpMuxKeepaliveInterval: 60
  
  # Communication protocol used to connect to server
  # supports tcp, kcp, quic, websocket and wss now, default is tcp
  protocol: "tcp"
  
  # set client binding ip when connect server, default is empty.
  # only when protocol = tcp or websocket, the value will be used.
  connectServerLocalIP: "0.0.0.0"
  
  # if you want to connect frps by http proxy or socks5 proxy or ntlm proxy, you can set proxyURL here or in global environment variables
  # it only works when protocol is tcp
  # proxyURL: "http://user:passwd@192.168.1.128:8080"
  # proxyURL: "socks5://user:passwd@192.168.1.128:1080"
  # proxyURL: "ntlm://user:passwd@192.168.1.128:2080"
  
  # quic protocol options
  # quic.keepalivePeriod: 10
  # quic.maxIdleTimeout: 30
  # quic.maxIncomingStreams: 100000
  
  # If tls.enable is true, frpc will connect frps by tls.
  # Since v0.50.0, the default value has been changed to true, and tls is enabled by default.
  tls:
    enable: true

  # tls.certFile: "client.crt"
  # tls.keyFile: "client.key"
  # tls.trustedCaFile: "ca.crt"
  # tls.serverName: "example.com"
  
  # If the disableCustomTLSFirstByte is set to false, frpc will establish a connection with frps using the
  # first custom byte when tls is enabled.
  # Since v0.50.0, the default value has been changed to true, and the first custom byte is disabled by default.
  # disableCustomTLSFirstByte: true

# Heartbeat configure, it's not recommended to modify the default value.
# The default value of heartbeatInterval is 10 and heartbeatTimeout is 90. Set negative value
# to disable it.
# heartbeatInterval: 30
# heartbeatTimeout: 90

# Specify a dns server, so frpc will use this instead of default one
# dnsServer: "8.8.8.8"

# Proxy names you want to start.
# Default is empty, means all proxies.
# start: ["ssh", "dns"]

# Specify udp packet size, unit is byte. If not set, the default value is 1500.
# This parameter should be same between client and server.
# It affects the udp and sudp proxy.
udpPacketSize: 1500

# Additional metadatas for client.
metadatas:
  var1: "abc"
  var2: "123"

# Include other config files for proxies.
# includes: ["./confd/*.ini"]

proxies:
  - name: "ssh"
    type: "tcp"
    localIP: "127.0.0.1"
    localPort: 22
    # Limit bandwidth for this proxy, unit is KB and MB
    transport:
      bandwidthLimit: "1MB"
      # Where to limit bandwidth, can be 'client' or 'server', default is 'client'
      bandwidthLimitMode: "client"
      # If true, traffic of this proxy will be encrypted, default is false
      useEncryption: false
      # If true, traffic will be compressed
      useCompression: false
    # Remote port listen by frps
    remotePort: 6001
    # frps will load balancing connections for proxies in same group
    loadBalancer:
      group: "test_group"
      # group should have same group key
      groupKey: "123456"
    # Enable health check for the backend service, it supports 'tcp' and 'http' now.
    # frpc will connect local service's port to detect it's healthy status
    healthCheck:
      type: "tcp"
      # Health check connection timeout
      timeoutSeconds: 3
      # If continuous failed in 3 times, the proxy will be removed from frps
      maxFailed: 3
      # Every 10 seconds will do a health check
      intervalSeconds: 10
    # Additional meta info for each proxy. It will be passed to the server-side plugin for use.
    metadatas:
      var1: "abc"
      var2: "123"
    # You can add some extra information to the proxy through annotations.
    # These annotations will be displayed on the frps dashboard.
    annotations:
      key1: "value1"
      prefix/key2: "value2"

  - name: "ssh_random"
    type: "tcp"
    localIP: "192.168.31.100"
    localPort: 22
    # If remotePort is 0, frps will assign a random port for you
    remotePort: 0

  - name: "dns"
    type: "udp"
    localIP: "114.114.114.114"
    localPort: 53
    remotePort: 6002

  - name: "web01"
    type: "http"
    localIP: "127.0.0.1"
    localPort: 80
    # http username and password are safety certification for http protocol
    # if not set, you can access this customDomains without certification
    httpUser: "admin"
    httpPassword: "admin"
    # if domain for frps is